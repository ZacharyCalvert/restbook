<article xmlns='http://docbook.org/ns/docbook'>
 <info>
  <title>Mode, Securing, and Modeling RESTful APIs</title>
  <author><personname>
 <firstname>Zach</firstname>
 <surname>Calvert</surname>
</personname><email>Zach@eventsandapis.com</email></author>
  <publisher><publishername>eventsandapis.com</publishername></publisher>
  <pubdate>2020</pubdate>
 </info>

 <section id="target">
  <title>Introduction</title>
  <para>
    This book is written for software engineers and architects who have development experience with a modern language or two and hopefully have been responsible for a nontrivial integration.  You might have even encountered an API which "felt off" or was hard to understand, and couldn't quite identify what was wrong with it.  Encountering a poorly designed API can make you question the quality of the offered product, and is analogous to a bad first date.  A good deal of the time, a first impression really can tell you all you need to know.
  </para>
  <para>
    The structure of the book is to start with an explanation of a simple HTTP over TCP exchange, a brief history, and a case study which we will follow throughout the book.  Security, while a significant portion of our focus, is presented after the foundational concepts of REST.  Architectural concepts are presented with thought given to security, scaleability, and maintainability.
  </para>
  <<para>
    While the architect for APIs tends to be experienced back-end systems engineers, there is quite a bit of merit to enabling the front-end engineers as the designers.  Throughout this book, we present the concept of Consumer-Driven Contracts, where we place the burden on the back-end teams to develop systems which hide the complexity through a consumer friendly API.  We will hide all of the legacy, all of the history, all of the bad technology choices, behind a clean API meant to enable thin-clients to integrate to.  Our goal is fast adoption so that we can build native and browser apps for Android, iOS, desktop, and command-line consumers.  In addition, your consumers may also be other microservice apps and systems engineers.  If you find yourself as a front-end application developer, butting heads with a stubborn API architect, hopefully this book offers you some key points to reasoning why the API you're integrating to is difficult to adopt and allows for you to articulate problems with the provided API.
  </para>
  <para>
    Throughout this book, we will introduce development utilities, debuggers, proxies, and command line utilities.  You'll want to have access to a BASH or ZSH terminal for access to curl and tcpdump.  As expected, you'll also want access to a modern browser with development tools, in 2020 just about any widely available browser will do.  You'll need access to the internet for reviewing the current OPEN API specification and online editors such as <uri>https://editor.swagger.io/</uri>.  You'll likely also need desktop applications for packet capture reviewing such as WireShark.  Plan to also install desktop applications such as POSTMAN and Charles Proxy.
  </para>
  <para>
      For the sake of brevity, this is not really a book for software developers just getting started in their career.  Pairs programming and proper mentorship are a fundamental starting point for someone responsible for designing public facing services.  At a minimum, you probably should have a microservice or two under your belt.
  </para>
 </section>


 <section id="body">
  <title>Section with a title</title>
  <para>Main body text goes here.</para>
 </section>

 <section id="conclusion">
  <title>Conclusion</title>
  <para>Exciting and inspiring conclusion goes here.</para>
 </section>
</article>
